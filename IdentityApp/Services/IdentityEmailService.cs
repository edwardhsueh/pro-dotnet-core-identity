using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.UI.Services;
using Microsoft.AspNetCore.Routing;
using System.Threading.Tasks;
using System;
namespace IdentityApp.Services {
    /// <summary>
    /// Use HttpContext from custom components
    /// IHttpContextAccessor used to access the HttpContext object outside of a Razor Page or controller
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="userMgr"></param>
    /// <param name="contextAccessor"></param>
    /// <param name="generator"></param>
    /// <param name="encoder"></param>
    public class IdentityEmailService {
        public IdentityEmailService(IEmailSender sender,
                UserManager<IdentityUser> userMgr,
                IHttpContextAccessor contextAccessor,
                LinkGenerator generator,
                TokenUrlEncoderService encoder) {
            EmailSender = sender;
            UserManager = userMgr;
            ContextAccessor = contextAccessor;
            LinkGenerator = generator;
            TokenEncoder = encoder;
        }
        public IEmailSender EmailSender { get; set; }
        public UserManager<IdentityUser> UserManager { get; set;}
        public IHttpContextAccessor ContextAccessor { get; set; }
        public LinkGenerator LinkGenerator { get; set; }
        public TokenUrlEncoderService TokenEncoder { get; set; }

/// <summary>
/// if result URL is wrong, please check if cshtml/cshtml.cs is at the right location
/// </summary>
/// <param name="emailAddress"></param>
/// <param name="token"></param>
/// <param name="page"></param>
/// <returns></returns>
        private string GetUrl(string emailAddress, string token, string page) {
            string safeToken = TokenEncoder.EncodeToken(token);
            string url = LinkGenerator.GetUriByPage(ContextAccessor.HttpContext, page,
                null, new { email = emailAddress, token = safeToken});
            Console.WriteLine($"URL:{url}");
            return url;
        }
        // for admin/create
        private string AdminGetUrl(string emailAddress, string token, string page) {
            string safeToken = TokenEncoder.EncodeToken(token);
            string url = LinkGenerator.GetUriByPage(
                ContextAccessor.HttpContext, page,
                null, new { email = emailAddress, token = safeToken}, 
                "https", 
                new HostString("localhost", 44350));
            Console.WriteLine($"URL:{url}");
            return url;
        }

public async Task SendAccountConfirmEmail(IdentityUser user, string confirmationPage) {
            string token = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            string url = GetUrl(user.Email, token, confirmationPage);
            await EmailSender.SendEmailAsync(user.Email,
                "Complete Your Account Setup",
                $"Please set up your account by <a href={url}>clicking here</a>.");
        }
        public async Task SendPasswordRecoveryEmail(IdentityUser user,
                string confirmationPage) {
    /// <summary>
    /// The link sent to the user contains a confirmation token, which is used by Identity to prevent other users from recovering an account password. Confirmation tokens are generated by methods defined by the user manager class, and the GeneratePasswordResetTokenAsync method generates a token that can be used in password recovery workflows.
    /// </summary>
    /// <returns></returns>
            string token = await UserManager.GeneratePasswordResetTokenAsync(user);
            string url = GetUrl(user.Email, token, confirmationPage);
            await EmailSender.SendEmailAsync(user.Email, "Set Your Password",
                $"Please set your password by <a href={url}>clicking here</a>.");
        }

        public async Task AdminSendPasswordRecoveryEmail(IdentityUser user,
                string confirmationPage) {
    /// <summary>
    /// The link sent to the user contains a confirmation token, which is used by Identity to prevent other users from recovering an account password. Confirmation tokens are generated by methods defined by the user manager class, and the GeneratePasswordResetTokenAsync method generates a token that can be used in password recovery workflows.
    /// </summary>
    /// <returns></returns>
            string token = await UserManager.GeneratePasswordResetTokenAsync(user);
            string url = AdminGetUrl(user.Email, token, confirmationPage);
            await EmailSender.SendEmailAsync(user.Email, "Set Your Password",
                $"Please set your password by <a href={url}>clicking here</a>.");
        }

    }
}